buildscript {
    repositories {
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }

    ext {
        defaultEncoding = 'UTF-8'

        // Dependency versions
        apacheCommonsVersion = '1.9.4'
        apacheValidatorVersion = '1.7'
        graphqlDgsVersion = '4.9.14'
        jetbrainsAnnotationVersion = '22.0.0'
        jjwtVersion = '0.11.2'
        libphonenumberVersion = '8.12.40'
        log4jVersion = '2.17.0'
        mapstructVersion = '1.4.2.Final'
        nettyVersion = '4.1.71.Final'
        passayVersion = '1.6.1'
        springCloudVersion = '2021.0.0'

        // Plugin versions
        dependencyManagementPluginVersion = '1.0.11.RELEASE'
        lombokPluginVersion = '6.0.0-m2'
        springBootPluginVersion = '2.6.1'
        dgsCodegenPluginVersion = '5.1.11'
        liquibasePluginVersion = '2.1.1'

        // Other tool versions
        picocliVersion = '4.6.2'
        mongoDriverVersion = '3.12.10'
        liquibaseCoreVersion = '4.6.2'
        liquibaseGroovyDslVersion = '3.0.2'

        // The Checkstyle IDE plugin should support the version defined here
        checkstyleToolVersion = '8.44'
        // The PMD IDE plugin should support the version defined here
        pmdToolVersion = '6.36.0'
        jacocoToolVersion = '0.8.7'

        // Checkstyle and PMD excluded classes
        generatedClasses = ['**/graphql/**',
                            '**/mapper/*Impl*']

        // Jacoco excluded files of coverage report
        excludedCoverageReport = ['com/hohomalls/**/config/*',
                                  'com/hohomalls/**/scalar/*',
                                  'com/hohomalls/**/pojo/*',
                                  'com/hohomalls/**/document/*',
                                  'com/hohomalls/**/mapper/*',
                                  'com/hohomalls/**/property/*',
                                  'com/hohomalls/**/graphql/*']
    }

    dependencies {
        classpath "io.spring.gradle:dependency-management-plugin:$dependencyManagementPluginVersion"
        classpath "io.freefair.gradle:lombok-plugin:$lombokPluginVersion"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$springBootPluginVersion"
        classpath "com.netflix.graphql.dgs.codegen:graphql-dgs-codegen-gradle:$dgsCodegenPluginVersion"
        classpath "org.liquibase:liquibase-gradle-plugin:$liquibasePluginVersion"
    }
}

allprojects {
    group = 'com.hohomalls'
    version = '1.0.0-SNAPSHOT'
}

subprojects {
    // Plugin order matters
    apply plugin: 'java'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'io.freefair.lombok'
    apply plugin: 'jacoco'
    apply plugin: 'pmd'
    apply plugin: 'checkstyle'
    apply plugin: 'maven-publish'

    java.sourceCompatibility = JavaVersion.VERSION_17
    java.targetCompatibility = JavaVersion.VERSION_17

    compileJava.options.encoding = defaultEncoding
    compileTestJava.options.encoding = defaultEncoding

    ext['log4j2.version'] = log4jVersion

    repositories {
        mavenCentral()
        mavenLocal()
    }

    dependencyManagement {
        // Three ways to manage dependency version numbers:
        // 1. By using versions from SpringBootPlugin.BOM_COORDINATES in the imports block
        // 2. By defining versions in the ext block
        // 3. By using the platform of netflix dgs in the dependencies block
        dependencies {
            imports {
                // Import dependency version numbers
                mavenBom org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES
                mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
            }

            dependency group: 'com.googlecode.libphonenumber', name: 'libphonenumber', version: libphonenumberVersion
            dependency group: 'com.netflix.graphql.dgs', name: 'graphql-dgs-platform-dependencies', version: graphqlDgsVersion
            dependency group: 'commons-beanutils', name: 'commons-beanutils', version: apacheCommonsVersion
            dependency group: 'commons-validator', name: 'commons-validator', version: apacheValidatorVersion
            dependency group: 'info.picocli', name: 'picocli', version: picocliVersion
            dependency group: 'io.netty', name: 'netty-resolver-dns-native-macos', version: nettyVersion, classifier: 'osx-aarch_64'
            dependency group: 'org.jetbrains', name: 'annotations', version: jetbrainsAnnotationVersion
            dependency group: 'org.liquibase', name: 'liquibase-core', version: liquibaseCoreVersion
            dependency group: 'org.liquibase', name: 'liquibase-groovy-dsl', version: liquibaseGroovyDslVersion
            dependency group: 'org.passay', name: 'passay', version: passayVersion
            dependency group: 'org.mongodb', name: 'mongo-java-driver', version: mongoDriverVersion

            dependencySet(group: 'org.mapstruct', version: mapstructVersion) {
                entry 'mapstruct'
                entry 'mapstruct-processor'
            }

            dependencySet(group: 'io.jsonwebtoken', version: jjwtVersion) {
                entry 'jjwt-api'
                entry 'jjwt-impl'
                entry 'jjwt-jackson'
            }
        }
    }

    dependencies {
        annotationProcessor group: 'org.mapstruct', name: 'mapstruct-processor'
        implementation group: 'com.google.guava', name: 'guava'
        implementation group: 'org.jetbrains', name: 'annotations'
        implementation group: 'org.mapstruct', name: 'mapstruct'
        implementation(platform("com.netflix.graphql.dgs:graphql-dgs-platform-dependencies"))
        testAnnotationProcessor group: 'org.mapstruct', name: 'mapstruct-processor'
        testImplementation group: 'io.projectreactor', name: 'reactor-test'
        testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test'
    }

    compileJava {
        options.compilerArgs += ['-Amapstruct.defaultComponentModel=spring',
                                 '-Amapstruct.defaultInjectionStrategy=constructor']
    }

    test {
        useJUnitPlatform()

        // report is always generated after tests run
        finalizedBy jacocoTestReport
    }

    jacoco {
        toolVersion = jacocoToolVersion
    }

    jacocoTestCoverageVerification {
        violationRules {
            rule {
                limit {
                    counter = 'LINE'
                    value = 'COVEREDRATIO'
                    // FIXME
                    minimum = 0
                }
            }
        }
    }

    jacocoTestReport {
        // tests are required to run before generating the report
        dependsOn test

        reports {
            xml.required = false
            csv.required = false
        }

        afterEvaluate {
            classDirectories.setFrom(files(classDirectories.files.collect {
                fileTree(dir: it, exclude: excludedCoverageReport)
            }))
        }
    }

    // Run coverage verification during the build (and fail when appropriate)
    check.dependsOn jacocoTestCoverageVerification

    checkstyle {
        // The Checkstyle IDE plugin should use the some rule
        // files stored in config/checkstyle/checkstyle.xml
        maxErrors = 0
        maxWarnings = 10
        ignoreFailures = false
        showViolations = true
        toolVersion = checkstyleToolVersion
        // Skip test cases
        sourceSets = [project.sourceSets.main]
        checkstyleMain {
            // Get rid of the gradle warning from the plugin itself
            dependsOn compileTestJava
            excludes = generatedClasses
        }
    }

    pmd {
        maxFailures = 10
        consoleOutput = false
        ignoreFailures = false
        incrementalAnalysis = false
        toolVersion = pmdToolVersion
        // Skip test cases, which was also defined in the rule set file
        sourceSets = [project.sourceSets.main]
        // The PMD IDE plugin should use these rule sets as well.
        ruleSetFiles "$rootDir/config/pmd/java.xml"
        // Disable built-in rule sets
        ruleSets = []

        pmdMain {
            dependsOn compileTestJava
            // Excluded rules are defined in the rule set file
            // excludes = generatedClasses
        }
    }

    publishing {
        publications {
            maven(MavenPublication) {
                from(components.java)
            }
        }
    }
}


