extend type Mutation {
    # Sign up a user and get an access token in jws
    signUp(user: CreateUserDto): String!

    # Sign in a user and get an access token in jws
    signIn(credentials: CredentialsDto): String!

    # Sign out the current user
    signOut: Void

    # Change the password of a user
    changePassword(password: ChangePasswordDto!): Void

    # Update the details of a user
    updateUser(user: UpdateUserDto!): UserDto!
}

extend type Query {
    findUser: UserDto
}

input CreateUserDto {
    # A unique nickname
    nickname: String!
    # A unique email
    email: ID!
    password: String!
    roles: [Role]!
    mobile: String
    addresses: [AddressDto!]
}

input CredentialsDto {
    email: ID!
    password: String!
}

input ChangePasswordDto {
    before: String!
    after: String!
}

input UpdateUserDto {
    # A unique nickname
    nickname: String!
    roles: [Role]!
    mobile: String
    addresses: [AddressDto!]
}

type UserDto {
    email: ID!
    mobile: String
    nickname: String!
    addresses: [AddressOutputDto!]
    rating: Float
}

enum UserStatus {
    ACTIVE
    INACTIVE
    TERMINATED
}

enum Role {
    ROLE_SELLER
    ROLE_BUYER
}